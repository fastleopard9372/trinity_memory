generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id            String          @id @default(uuid())
  userId        String          @unique
  username      String?         @unique
  email         String
  settings      Json            @default("{}")
  memoryQuotaMb Int             @default(1000)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  agentJobs     AgentJob[]
  conversations Conversation[]
  fileAccess    FileAccessLog[]
  memoryRules   MemoryRule[]
  nasFiles      NasFile[]
  searchQueries SearchQuery[]
}

model NasFile {
  id             String          @id @default(uuid())
  userId         String
  filePath       String
  fileName       String
  folderPath     String
  fileType       String?
  fileSize       BigInt?
  mimeType       String?
  checksum       String?
  createdAt      DateTime        @default(now())
  modifiedAt     DateTime        @default(now())
  lastAccessed   DateTime?
  indexedAt      DateTime?
  title          String?
  summary        String?
  tags           String[]
  metadata       Json?
  conversationId String?
  vectorIds      String[]
  accessLogs     FileAccessLog[]
  conversation   Conversation?   @relation(fields: [conversationId], references: [id])
  profile        Profile         @relation(fields: [userId], references: [userId])

  @@unique([userId, filePath])
  @@index([userId])
  @@index([filePath])
  @@index([fileType])
  @@index([conversationId])
}

model Conversation {
  id           String            @id @default(uuid())
  userId       String
  sessionId    String?
  messageCount Int               @default(0)
  totalTokens  Int               @default(0)
  status       String            @default("active")
  summary      String?
  metadata     Json              @default("{}")
  startedAt    DateTime          @default(now())
  endedAt      DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  profile      Profile           @relation(fields: [userId], references: [userId])
  tags         ConversationTag[]
  triggers     MemoryTrigger[]
  messages     Message[]
  nasFiles     NasFile[]
  proposals    Proposal[]
}

model Message {
  id             String       @id @default(uuid())
  conversationId String
  role           String
  tokenCount     Int?
  vectorId       String?
  metadata       Json?
  timestamp      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([timestamp])
}

model Tag {
  id            Int               @id @default(autoincrement())
  name          String
  userId        String
  category      String?
  color         String?
  createdAt     DateTime          @default(now())
  conversations ConversationTag[]

  @@unique([name, userId])
}

model ConversationTag {
  conversationId String
  tagId          Int
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  tag            Tag          @relation(fields: [tagId], references: [id])

  @@id([conversationId, tagId])
}

model MemoryRule {
  id         String   @id @default(uuid())
  userId     String
  ruleType   String
  conditions Json
  actions    Json
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  profile    Profile  @relation(fields: [userId], references: [userId])
}

model MemoryTrigger {
  id             String       @id @default(uuid())
  triggerType    String
  conversationId String
  details        Json?
  triggeredAt    DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}

model SearchQuery {
  id              String   @id @default(uuid())
  userId          String
  queryText       String
  queryType       String
  filePaths       String[]
  executionTimeMs Int?
  createdAt       DateTime @default(now())
  profile         Profile  @relation(fields: [userId], references: [userId])
}

model FileAccessLog {
  id         String   @id @default(uuid())
  userId     String
  fileId     String
  accessType String
  accessedAt DateTime @default(now())
  file       NasFile  @relation(fields: [fileId], references: [id])
  profile    Profile  @relation(fields: [userId], references: [userId])

  @@index([userId])
  @@index([fileId])
}

model AgentJob {
  id          String     @id @default(uuid())
  userId      String
  source      String?
  title       String
  description String?
  budgetMin   Decimal?   @db.Decimal(10, 2)
  budgetMax   Decimal?   @db.Decimal(10, 2)
  postedAt    DateTime?
  scrapedAt   DateTime   @default(now())
  metadata    Json?
  profile     Profile    @relation(fields: [userId], references: [userId])
  proposals   Proposal[]
}

model Proposal {
  id             String        @id @default(uuid())
  jobId          String
  conversationId String?
  content        String
  generatedAt    DateTime      @default(now())
  submittedAt    DateTime?
  status         String?
  metadata       Json?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  job            AgentJob      @relation(fields: [jobId], references: [id])
}
